apply plugin: 'com.android.application'

apply plugin: 'AspectPlugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
// 这个是测试 permissionPlugin 或 com.github.2017398956:abcpermission-plugin:{version} 时引用的
//apply plugin: 'abcpermission.plugin'
//apply plugin: 'android-aspectjx'
// 这里的代码只在不用 apply plugin: 'abcpermission.plugin' 和 apply plugin: 'AspectPlugin' 时使用
// 需要在根 build.gradle 中开启下面两个依赖后才能导入
//classpath 'org.aspectj:aspectjtools:1.9.6'
//classpath 'org.aspectj:aspectjweaver:1.9.6'
//import org.apache.commons.io.FileUtils
//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main

//kapt {
//    arguments {
//        arg("AROUTER_MODULE_NAME", project.getName())
//    }
//}
//如果有用到 kapt 添加如下配置
kapt {
    //
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

android {
    compileSdkVersion 29
    // debug 版本不要动态修改版本号，会拖慢编译效率
    defaultConfig {
        applicationId "personal.nfl.abcpermission"
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // 可优化 transformClassDexBuilderForDebug 的时间
    dexOptions {
        preDexLibraries true
        maxProcessCount 8
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    implementation project(':permissionAnnotation')
    // 这里必须用 annotationProcessor 或 kapt
//     annotationProcessor project(':permissionCompiler')
    kapt project(':permissionCompiler')
    implementation project(':permissionSupport')
    // 仅在非插件模式下使用 aspectj
//    implementation 'org.aspectj:aspectjrt:1.9.6'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //implementation "org.jetbrains.kotlin:kotlin-annotation-processing:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-annotation-processing-runtime:$kotlin_version"
}

// 这里的代码只在不用 apply plugin: 'abcpermission.plugin' 和 apply plugin: 'AspectPlugin' 时使用
// 如果 module 是 library 则 将 applicationVariants 替换为 libraryVariants
//android.applicationVariants.all { variant ->
//    Task javaCompile = variant.getJavaCompileProvider().get()
//    println("This is javaComplile:" + javaCompile)
//    project.logger.log(LogLevel.ERROR, "=====================")
//    javaCompile.doLast {
//        MessageHandler handler = new MessageHandler(true)
//        String aspectPath = javaCompile.classpath.asPath
//        String inPath = javaCompile.destinationDir.toString()
//        String dPath = javaCompile.destinationDir.toString();
//        String classpath = javaCompile.classpath.asPath
//        // 配置 kotlin 相关参数
//        String kotlinInPath = ""
//        if (dPath.contains("debug\\classes")) {
//            kotlinInPath = javaCompile.temporaryDir.getParentFile().path + File.separator + "kotlin-classes" + File.separator + "debug"
//        } else {
//            kotlinInPath = javaCompile.temporaryDir.getParentFile().path + File.separator + "kotlin-classes" + File.separator + "release"
//        }
//        String sourceJDK = "1.8"
//        String targetJDK = "1.8"
//        if (project.hasProperty('android')) {
//            if (project.android.hasProperty('compileOptions')) {
//                if (project.android.compileOptions.hasProperty('targetCompatibility')) {
//                    targetJDK = project.android.compileOptions.properties.get('targetCompatibility')
//                }
//                if (project.android.compileOptions.hasProperty('sourceCompatibility')) {
//                    sourceJDK = project.android.compileOptions.properties.get('sourceCompatibility')
//                }
//            }
//
//        }
//        // java 的 class 文件实现 aop
//        String[] javacArgs = ["-showWeaveInfo",
//                              "-source", sourceJDK,
//                              "-target", targetJDK,
//                              "-inpath", kotlinInPath + ";" + inPath,
//                              "-aspectpath", aspectPath,
//                              "-d", dPath,
//                              "-classpath", classpath,
//                              "-bootclasspath", android.bootClasspath.join(File.pathSeparator)]
//        new Main().run(javacArgs, handler)
//
//        File[] kotlinClassFiles = FileUtils.listFiles(new File(kotlinInPath), null, true)
//        File javacKotlinFile
//        for (File temp : kotlinClassFiles) {
//            if (temp.isFile() && temp.getName().endsWith(".class")) {
//                javacKotlinFile = new File(inPath + File.separator + temp.absolutePath.replace(kotlinInPath, ""))
//                if (null != javacKotlinFile && javacKotlinFile.exists()) {
//                    FileUtils.copyFile(javacKotlinFile, temp)
//                    FileUtils.deleteQuietly(javacKotlinFile)
//                }
//            }
//        }
//
//        def log = project.logger
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}

//aspectjx {
//    //关闭AspectJX功能
//    enabled false
//    // ajcArgs 这里可以配置 aop 操作所需要的参数
//    // ajcArgs ''
//    //忽略所有的class文件及jar文件，相当于AspectJX不生效
//    // exclude '*'
//    exclude 'com.google'
//    exclude 'androidx.*'
//    exclude 'shark.*'
//    exclude 'org.aspectj.*'
//}




