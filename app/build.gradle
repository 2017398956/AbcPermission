apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
// apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
// EnvironmentType.TYPE_ASPECT 状态时用到
import org.apache.commons.io.FileUtils
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

// 在更改 gradle 缓存的 as 上无法直接引用，但运行的时候不会报错，待解决
// import org.gradle.api.Task


//kapt {
//    arguments {
//        arg("AROUTER_MODULE_NAME", project.getName())
//    }
//}
//如果有用到 kapt 添加如下配置
kapt {
    //
    useBuildCache = false
//    javacOptions {
//        option("-Xmaxerrs", 500)
//    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    // debug 版本不要动态修改版本号，会拖慢编译效率
    defaultConfig {
        applicationId "personal.nfl.abcpermission"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures{
        viewBinding = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"
    // implementation "org.jetbrains.kotlin:kotlin-annotation-processing:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-annotation-processing-runtime:$kotlin_version"
}

switch (rootProject.ext.environmentType) {

    case rootProject.ext.EnvironmentType.TYPE_ASPECT:
        dependencies {
            implementation project(':aopTest')
            implementation project(':permissionAnnotation')
            // 这里必须用 annotationProcessor 或 kapt
            // annotationProcessor project(':permissionCompiler')
            kapt project(':permissionCompiler')
            implementation project(':permissionSupport')
            // 仅在非插件模式下使用 aspectj
            implementation "org.aspectj:aspectjrt:${rootProject.ext.aspectjrtVersion}"
        }
        File aopTemp = new File(project.buildFile.parentFile.absolutePath + "${File.separator}src${File.separator}main${File.separator}java${File.separator}AopTemp.java")
        if (aopTemp.exists()){
            FileUtils.deleteQuietly(aopTemp)
        }
        Task kotlinCompile
        if (project.plugins.findPlugin("kotlin-android") != null) {
            kotlin.target.compilations.all { variant ->
                kotlinCompile = variant.getCompileKotlinTaskProvider().get()
                if ("release" == variant.name) {
                    kotlinCompile.doLast {
                        println("This is print after kotlin release compile and should exc aop .")
                    }
                }
                if ("debug" == variant.name) {
                    kotlinCompile.doLast {
                        // 解决：当 java 代码没有变化时，javaCompile 不执行
                        println("kolinCompile.path : " + kotlinCompile.path)
                        println("This is print after kotlin debug compile and should exc aop .")
                        FileWriter fileWriter = new FileWriter(aopTemp)
                        fileWriter.write("public class AopTemp {int a = " + new Random().nextInt() + ";}")
                        fileWriter.flush()
                        fileWriter.close()
                    }
                }
            }
        }
        android.applicationVariants.all { variant ->
            Task javaCompile = variant.getJavaCompileProvider().get()
            javaCompile.doLast {
                println("this is javaCompile.doLast")
                MessageHandler handler = new MessageHandler(true)
                String aspectPath = javaCompile.classpath.asPath
                String inPath = javaCompile.destinationDir.toString()
                String dPath = javaCompile.destinationDir.toString();
                String classpath = javaCompile.classpath.asPath
                println("aspectPath = ${aspectPath}")
                println("inPath = ${inPath}")
                println("dPath = ${dPath}")
                if (null != aopTemp && aopTemp.exists()) {
                    println("delete file:" + aopTemp.absolutePath)
                    FileUtils.deleteQuietly(aopTemp)
                }
                File aopTempClass = new File(dPath + File.separator + "AopTemp.class")
                if (aopTempClass.exists()) {
                    println("delete file:" + aopTempClass.absolutePath)
                    FileUtils.deleteQuietly(aopTempClass)
                }


                // 配置 kotlin 相关参数
                String kotlinInPath = ""
                if (dPath.contains("debug${File.separator}classes")) {
                    kotlinInPath = javaCompile.temporaryDir.getParentFile().path + "${File.separator}kotlin-classes${File.separator}debug"
                } else {
                    kotlinInPath = javaCompile.temporaryDir.getParentFile().path + "${File.separator}kotlin-classes${File.separator}release"
                }
                String sourceJDK = "1.8"
                String targetJDK = "1.8"
                if (project.hasProperty('android')) {
                    if (project.android.hasProperty('compileOptions')) {
                        if (project.android.compileOptions.hasProperty('targetCompatibility')) {
                            targetJDK = project.android.compileOptions.properties.get('targetCompatibility')
                        }
                        if (project.android.compileOptions.hasProperty('sourceCompatibility')) {
                            sourceJDK = project.android.compileOptions.properties.get('sourceCompatibility')
                        }
                    }

                }
                String pathSplit = ";"
                if (kotlinInPath.startsWith("/")){
                    // 说明是 linux 或者 mac 环境
                    pathSplit = ":"
                }
                // java 的 class 文件实现 aop
                String[] javacArgs = ["-showWeaveInfo",
                                      "-source", sourceJDK,
                                      "-target", targetJDK,
                                      "-inpath", kotlinInPath + pathSplit + inPath,
                                      "-aspectpath", aspectPath,
                                      "-d", dPath,
//                        "-incremental",
                                      "-classpath", classpath,
                                      "-bootclasspath", android.bootClasspath.join(File.pathSeparator)]
                new Main().run(javacArgs, handler)
                println("kotlinInPath = ${kotlinInPath + pathSplit + inPath}")
                File[] kotlinClassFiles = FileUtils.listFiles(new File(kotlinInPath), null, true)
                File javacKotlinFile
                for (File temp : kotlinClassFiles) {
                    if (temp.isFile() && temp.getName().endsWith(".class")) {
                        javacKotlinFile = new File(inPath + File.separator + temp.absolutePath.replace(kotlinInPath, ""))
                        if (null != javacKotlinFile && javacKotlinFile.exists()) {
                            FileUtils.deleteQuietly(temp)
                            FileUtils.copyFile(javacKotlinFile, temp)
                            FileUtils.deleteQuietly(javacKotlinFile)
                        }
                    }
                }

                def log = project.logger
                for (IMessage message : handler.getMessages(null, true)) {
                    switch (message.getKind()) {
                        case IMessage.ABORT:
                        case IMessage.ERROR:
                        case IMessage.FAIL:
                            log.error message.message, message.thrown
                            break;
                        case IMessage.WARNING:
                        case IMessage.INFO:
                            log.info message.message, message.thrown
                            break;
                        case IMessage.DEBUG:
                            log.debug message.message, message.thrown
                            break;
                    }
                }
            }
        }
        break
    case rootProject.ext.EnvironmentType.TYPE_ASPECT_PLUGIN:
        apply plugin: 'AspectPlugin'
        dependencies {
            implementation project(':aopTest')
            implementation project(':permissionAnnotation')
            // 这里必须用 annotationProcessor 或 kapt
            // annotationProcessor project(':permissionCompiler')
            kapt project(':permissionCompiler')
            implementation project(':permissionSupport')
            // 仅在非插件模式下使用 aspectj
            // implementation 'org.aspectj:aspectjrt:1.9.6'
        }
        break
    case rootProject.ext.EnvironmentType.TYPE_LOCAL_MAVEN:
        apply plugin: 'abcpermission.plugin'
        break
    case rootProject.ext.EnvironmentType.TYPE_ABC_PERMISSION_PLUGIN:
        apply plugin: 'AspectPlugin'
        apply plugin: 'abcpermission.plugin'
        break
// 沪江共用下面的 aspectjx 环境
    case rootProject.ext.EnvironmentType.TYPE_HUJIANG:
        apply plugin: 'android-aspectjx'
    case rootProject.ext.EnvironmentType.TYPE_HUJIANG_LOCAL:
    case rootProject.ext.EnvironmentType.TYPE_HUJIANG_LOCAL_JAR:
        aspectjx {
            //关闭AspectJX功能
            enabled false
            // ajcArgs 这里可以配置 aop 操作所需要的参数
            // ajcArgs ''
            //忽略所有的class文件及jar文件，相当于AspectJX不生效
            // exclude '*'
            exclude 'com.google'
            exclude 'androidx.*'
            exclude 'shark.*'
            exclude 'org.aspectj.*'
        }
        break
}





