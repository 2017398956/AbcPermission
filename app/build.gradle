apply plugin: 'com.android.application'
// 这个是测试 permissionPlugin 或 com.github.2017398956:abcpermission-plugin:{version} 时引用的
// apply plugin: 'abcpermission.plugin'
//apply plugin: 'AspectPlugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'android-aspectjx'
// 这里的代码只在不用 apply plugin: 'abcpermission.plugin' 和 apply plugin: 'AspectPlugin' 时使用
// 需要在根 build.gradle 中开启下面两个依赖后才能导入
//classpath 'org.aspectj:aspectjtools:1.9.6'
//classpath 'org.aspectj:aspectjweaver:1.9.6'
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

//kapt {
//    arguments {
//        arg("AROUTER_MODULE_NAME", project.getName())
//    }
//}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "personal.nfl.abcpermission"
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    implementation project(':permissionAnnotation')
    // annotationProcessor project(':permissionCompiler')
    kapt project(':permissionCompiler')
    implementation project(':permissionSupport')
    api 'org.aspectj:aspectjrt:1.9.6'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //implementation "org.jetbrains.kotlin:kotlin-annotation-processing:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-annotation-processing-runtime:$kotlin_version"
}

// 这里的代码只在不用 apply plugin: 'abcpermission.plugin' 和 apply plugin: 'AspectPlugin' 时使用
// 如果 module 是 library 则 将 applicationVariants 替换为 libraryVariants
android.applicationVariants.all { variant ->
    Task javaCompile = variant.getJavaCompileProvider().get()
    println("This is javaComplile:" + javaCompile)
    project.logger.log(LogLevel.ERROR, "=====================")
    javaCompile.doLast {
        String aspectPath = javaCompile.classpath.asPath
        String dPath = javaCompile.destinationDir.toString() ;
        String classpath = javaCompile.classpath.asPath
        String kotlinPath = "E:\\Android\\Projects\\AbcPermission\\app\\build\\tmp\\kotlin-classes\\debug;"
        // kotlinPath = ""
        String inPath = kotlinPath + javaCompile.destinationDir.toString()

        String[] args = ["-showWeaveInfo",
                         "-1.7",
                         "-inpath", inPath ,
                         "-aspectpath", aspectPath,
                         "-d", dPath ,
                         "-classpath", classpath,
                         "-bootclasspath", android.bootClasspath.join(File.pathSeparator)]
        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)
        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

aspectjx {
    //关闭AspectJX功能
    enabled false
    // ajcArgs 这里可以配置 aop 操作所需要的参数
    // ajcArgs ''
    //忽略所有的class文件及jar文件，相当于AspectJX不生效
    // exclude '*'
    exclude 'com.google'
    exclude 'androidx.*'
    exclude 'shark.*'
    exclude 'org.aspectj.*'
}



//android.applicationVariants.all { variant ->
//    Task javaCompile = variant.getJavaCompileProvider().get()
//    println("This is javaComplile:" + javaCompile)
//    project.logger.log(LogLevel.ERROR, "=====================")
//    javaCompile.doLast {
//        String aspectPath = javaCompile.classpath.asPath
//        String dPath = javaCompile.destinationDir.toString();
//        String classpath = javaCompile.classpath.asPath
//
//        String kotlinPath = ""
//        if (dPath.contains("debug\\classes")) {
//            kotlinPath = javaCompile.temporaryDir.getParentFile().path + File.separator + "kotlin-classes" + File.separator + "debug"
//        } else {
//            kotlinPath = javaCompile.temporaryDir.getParentFile().path + File.separator + "kotlin-classes" + File.separator + "release"
//        }
////        String inPath = kotlinPath + ";" + javaCompile.destinationDir.toString()
//        String inPath = javaCompile.destinationDir.toString()
//        println("aspectj kotlinPath is " + kotlinPath)
//        String[] args = ["-showWeaveInfo",
//                         "-1.7",
//                         "-inpath", inPath,
//                         "-aspectpath", aspectPath,
//                         "-d", dPath,
//                         "-classpath", classpath,
//                         "-bootclasspath", android.bootClasspath.join(File.pathSeparator)]
//        MessageHandler handler = new MessageHandler(true)
//        new Main().run(args, handler)
//
//
//        String[] args2 = ["-showWeaveInfo",
//                          "-1.7",
//                          "-inpath", kotlinPath,
//                          "-aspectpath", aspectPath,
//                          "-d", kotlinPath,
//                          "-classpath", classpath,
//                          "-bootclasspath", android.bootClasspath.join(File.pathSeparator)]
//        new Main().run(args2, handler)
//
//        def log = project.logger
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}
