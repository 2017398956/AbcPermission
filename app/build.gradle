apply plugin: 'com.android.application'
// 这个是测试 permissionPlugin 或 com.github.2017398956:abcpermission-plugin:{version} 时引用的
// apply plugin: 'abcpermission.plugin'
apply plugin: 'AspectPlugin'
// 这里的代码只在不用 apply plugin: 'abcpermission.plugin' 和 apply plugin: 'AspectPlugin' 时使用
// import org.aspectj.bridge.IMessage
// import org.aspectj.bridge.MessageHandler
// import org.aspectj.tools.ajc.Main
android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "personal.nfl.abcpermission"
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    implementation project(':permissionAnnotation')
    annotationProcessor project(':permissionCompiler')
    api project(':permissionSupport')
    api 'org.aspectj:aspectjrt:1.9.5'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'
}

// 这里的代码只在不用 apply plugin: 'abcpermission.plugin' 和 apply plugin: 'AspectPlugin' 时使用
// 如果 module 是 library 则 将 applicationVariants 替换为 libraryVariants
//android.applicationVariants.all { variant ->
//    Task javaCompile = variant.getJavaCompileProvider().get()
//    println(javaCompile)
//    javaCompile.doLast {
//        String[] args = ["-showWeaveInfo",
//                         "-1.5",
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", android.bootClasspath.join(File.pathSeparator)]
//        MessageHandler handler = new MessageHandler(true)
//        new Main().run(args, handler)
//        def log = project.logger
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}
